package TournamentAdminService;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import TournamentAdminService.model.Tournament;
import TournamentAdminService.repository.TournamentRepository;
import TournamentAdminService.service.TournamentService;

import java.sql.Date;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

public class TournamentAdminServiceTest {
    @InjectMocks
    private TournamentService tournamentService;

    @Mock
    private TournamentRepository tournamentRepository;

    private Tournament tournament;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        tournament = new Tournament();
        tournament.setName("Championship");
        tournament.setStartDate(LocalDate.of(2024, 10, 1));
        tournament.setEndDate(LocalDate.of(2024, 10, 5));
        tournament.setLocation("Stadium A");
        tournament.setPlayerLimit(16);
        tournament.setIsActive(true);
        tournament.setDescOID("Description of Tournament");
        
        // In a real scenario, the ID would be set by the database when the tournament is created
    }

    @Test
    public void testCreateTournament() {
        // Act
        tournamentService.createTournament(tournament);
        
        // Assert
        verify(tournamentRepository, times(1)).createTournament(
                anyString(), 
                any(Date.class), 
                any(Date.class), 
                anyString(), 
                anyInt(), 
                anyBoolean(), 
                anyString()
        );
    }

    @Test
    public void testGetTournamentById() {
        when(tournamentRepository.getTournamentById(anyString())).thenReturn(tournament);
        Tournament retrievedTournament = tournamentService.getTournamentById("T001");
        assertEquals("Championship", retrievedTournament.getName());
    }

    @Test
    public void testUpdateTournament() {
        // In a real scenario, you would have the tournament ID set by the system here
        tournament.setTournamentID("GeneratedID"); // Simulating an ID generated by the system
        
        tournamentService.updateTournament(tournament);
        verify(tournamentRepository, times(1)).updateTournament(
                anyString(), 
                anyString(),
                any(Date.class), 
                any(Date.class), 
                anyString(), 
                anyInt(), 
                anyBoolean(), 
                anyString()
        );
    }

    @Test
    public void testDeleteTournament() {
        // Assuming the ID is set after the tournament is created
        tournament.setTournamentID("GeneratedID"); // Simulating an ID generated by the system
        
        tournamentService.deleteTournament("GeneratedID");
        verify(tournamentRepository, times(1)).deleteTournament("GeneratedID");
    }

    @Test
    public void testGetAllTournaments() {
        when(tournamentRepository.getAllTournaments()).thenReturn(Arrays.asList(tournament));
        List<Tournament> tournaments = tournamentService.getAllTournaments();
        assertEquals(1, tournaments.size());
        assertEquals("Championship", tournaments.get(0).getName());
    }
}
